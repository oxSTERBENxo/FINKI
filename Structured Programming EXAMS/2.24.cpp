/*Еден елемент се заматува ако се најде аритметичка средина на елементот и сите негови соседи. 
Сосед на еден елемент се сите елементи кои припаѓаат на матрицата и се  околу истиот елемент (хоризонтално, вертикално и дијагонално). 
Од стандарден влез се чита матрица од реални броеви (3 < n,m < 50). Прво се читаат бројот на редици и колони на матрицата и во
секој преостанат ред се внесува еден ред од матрицата (види пример).По читањето на матрицата, се внесуваат и 2 пара координати на
матрицата (ред и колона) кои го репрезентираат горниот-лев и долниот-десен елемент од регионот. Потребно е да генеирате нова матрица
во која ќе ги заматите сите елементи кои припаѓаат на регионот. 
Новодобиената матрица, во истиот формат, треба да се испечати (види пример).
Пример:
3 4
1.00 2.00 3.00 4.00
5.00 6.00 7.00 8.00
9.00 0.00 1.00 2.00
0 1
2 2
Резултат:
3 4
1.00 4.00 5.00 4.00
5.00 3.78 3.67 8.00
9.00 4.67 4.00 2.00*/



#include <iostream>
using namespace std;
int main() {
    int n, m, i, j, i1, i2, j1, j2;
    float mat[50][50];
    float mat2[50][50];

    cin >> n >> m;
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            cin >> mat[i][j];
            mat2[i][j]=mat[i][j];
        }
    }
    cin >> i1 >> j1;
    cin >> i2 >> j2;
    for (i = i1; i <= i2; i++) {
        for (j = j1; j <= j2; j++) {
            if (i==0&&j==0){
                mat2[0][0]=(mat[0][0]+mat[0][1]+mat[1][0]+mat[1][1])/4.0;
                continue;
            }
            if(i==0&&j==m-1){
                mat2[0][m-1]=(mat[0][m-1]+mat[0][m-2]+mat[1][m-2]+mat[1][m-1])/4.0;
                continue;
            }
            if(i==n-1&&j==0){
                mat2[n-1][0]=(mat[n-1][0]+mat[n-2][0]+mat[n-2][1]+mat[n-1][1])/4.0;
                continue;
            }
            if(i==n-1&&j==m-1){
                mat2[n-1][m-1]=(mat[n-1][m-1]+mat[n-1][m-2]+mat[n-2][m-1]+mat[n-2][m-2])/4.0;
                continue;
            }
            if(i>0 && i<n-1 && j==0){
                mat2[i][j]=(mat[i][j]+mat[i-1][j]+mat[i-1][j+1]+mat[i][j+1]+mat[i+1][j]+mat[i+1][j+1])/6.0;
                continue;
            }
            if(i>0 && i<n-1 && j==m-1){
                mat2[i][j]=(mat[i][j]+mat[i-1][j]+mat[i-1][j-1]+mat[i][j-1]+mat[i+1][j-1]+mat[i+1][j])/6.0;
                continue;
            }
            if(j>0 && j<n-1 && i==0){
                mat2[i][j]=(mat[i][j]+mat[i][j-1]+mat[i+1][j-1]+mat[i+1][j]+mat[i+1][j+1]+mat[i][j+1])/6.0;
                continue;
            }
            if(j>0 && j<n-1 && i==n-1){
                mat2[i][j]=(mat[i][j]+mat[i][j-1]+mat[i-1][j-1]+mat[i-1][j]+mat[i-1][j+1]+mat[i][j+1])/6.0;
                continue;
            }
            if(i>0 && i<n-1 && j>0 && j<m-1){
                mat2[i][j]=(mat[i][j]+mat[i+1][j]+mat[i+1][j+1]+mat[i][j+1]+mat[i-1][j+1]+mat[i-1][j]+mat[i-1][j-1]+mat[i][j-1]+mat[i+1][j-1])/9.0;
                continue;
            }
        }

    }
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            cout<<mat2[i][j]<<" ";
        }
        cout<<endl;
    }
}
