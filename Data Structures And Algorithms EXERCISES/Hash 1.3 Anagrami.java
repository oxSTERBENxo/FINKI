/*–ö–æ—Ä–∏—Å—Ç–µj¬¥–∫–∏ —Ö–µ—à —Ç–∞–±–µ–ª–∞ –¥–∞ —Å–µ –≥—Ä—É–ø–∏—Ä–∞–∞—Ç —Å–∏—Ç–µ –∞–Ω–∞–≥—Ä–∞–º–∏ –æ–¥ –¥–∞–¥–µ–Ω–∞ –ª–∏—Å—Ç–∞ —Å–æ –∑–±–æ—Ä–æ–≤–∏. –ê–Ω–∞–≥—Ä–∞–º–∏ —Å–µ –∑–±–æ—Ä–æ–≤–∏ –∫–æ–∏ —Å–µ –¥–æ–±–∏–≤–∞–∞—Ç —Å–æ –ø—Ä–µ—É—Ä–µ–¥—É–≤–∞—ö–µ –Ω–∞ –±—É–∫–≤–∏—Ç–µ –æ–¥ –∑–±–æ—Ä–æ—Ç. 
–ù–∞ –ø—Ä–∏–º–µ—Ä spar –µ –∞–Ω–∞–≥—Ä–∞–º –Ω–∞ rasp. –í–ª–µ–∑: –í–æ –ø—Ä–≤–∏–æ—Ç —Ä–µ–¥ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –∑–±–æ—Ä–æ–≤–∏ ùëÅ . –í–æ –Ω–∞—Ä–µ–¥–Ω–∏—Ç–µ ùëÅ —Ä–µ–¥–∞ —Å–µ –¥–∞–¥–µ–Ω–∏ –∑–±–æ—Ä–æ–≤–∏—Ç–µ –∫–æ–∏ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –¥–æ–¥–∞–¥–∞—Ç –≤–æ —Ç–∞–±–µ–ª–∞—Ç–∞. 
–í–æ —Å–ª–µ–¥–Ω–∏–æ—Ç —Ä–µ–¥ –µ –¥–∞–¥–µ–Ω –∑–±–æ—Ä–æ—Ç –∑–∞ –∫–æj —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∏ –±—Ä–æj–æ—Ç –Ω–∞ –∞–Ω–∞–≥—Ä–∞–º–∏ –≤–æ —Ç–∞–±–µ–ª–∞—Ç–∞. –ò–∑–ª–µ–∑: –ë—Ä–æj–æ—Ç –Ω–∞ –∞–Ω–∞–≥—Ä–∞–º–∏ –≤–æ —Ç–∞–±–µ–ª–∞—Ç–∞ –∑–∞ –¥–∞–¥–µ–Ω–∏–æ—Ç –∑–±–æ—Ä.
–ü—Ä–∏–º–µ—Ä: –í–ª–µ–∑:
6
eat
tea
tan
ate
nat
bat
ant
–ò–∑–ª–µ–∑:
2
*/

import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class HashAnagramiTypeShi {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        HashMap<String, Integer> map = new HashMap<>();
        int n = Integer.parseInt(sc.nextLine());
        for (int i = 0; i < n; i++) {
            String word = sc.nextLine();
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            String newWord = new String(chars);
            map.put(newWord, map.getOrDefault(newWord, 0) + 1);
        }
        String lastWord = sc.nextLine();
        char[] chars = lastWord.toCharArray();
        Arrays.sort(chars);
        lastWord = new String(chars);
        if(map.containsKey(lastWord)) {
            System.out.println(map.get(lastWord));
        }else{
            System.out.println("Nema anagrami meow");
        }
    }
}

// forata e da gi sortirame site zborovi.
//e sega we consider deka a word is an anagram to itself
//poso ne znam kako drukse da ja resam poz
//i oni taka ja resavaat ig...

//eve primer test case
//input
/*
4
listen
silent
enlist
inlets
listen
*/
//output 4
